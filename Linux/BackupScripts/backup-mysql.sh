#!/bin/bash

##------------------------------------------------------------------------------
## MySQL backup script
## This script keeps the database dumps in sync with the current
## databases, without keeping history.
## This is useful to restore on a different MySQL server
##------------------------------------------------------------------------------

CONFIG_FILE=~/.mysql-backup-rc

CMD_MYSQL="mysql"
CMD_MYSQLDUMP="mysqldump"
MYSQL_USER="root"
MYSQL_USER_PASS=""
MYSQL_HOST="localhost"
REPOSITORY="/BACKUP/mysql"
CONFIGURED=0

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    echo "Creating configuration file $CONFIG_FILE"
    cat > "$CONFIG_FILE" <<EOF
## Configuration file for mysql-backup.sh
## Autogenerated on $(date +"%F %T %Z")
CMD_MYSQL="$CMD_MYSQL"
CMD_MYSQLDUMP="$CMD_MYSQLDUMP"
MYSQL_USER="$MYSQL_USER"
MYSQL_USER_PASS="$MYSQL_USER_PASS"
MYSQL_HOST="$MYSQL_HOST"
REPOSITORY="$REPOSITORY"

## Once configured, set this to 1 in order to continue
CONFIGURED=0
EOF
fi

if [ "$CONFIGURED" == 0 ]; then
    echo "You need to review configuration in $CONFIG_FILE"
    echo "before running this script!"
    echo "Please check configuration file and run again."
    exit 2
fi

echo "Starting MySQL backup"
echo "Repository: $REPOSITORY"

[ ! -d "$REPOSITORY" ] && mkdir -p "$REPOSITORY"

if [ ! -d "$REPOSITORY" ]; then
    echo "Repository $REPOSITORY doesn't exist!"
    exit 1
fi

echo "Purging old backups..."
rm -fr "$REPOSITORY"/*


## Check if service is running
echo "Making sure MySQL is running..."
/etc/init.d/mysql start &> /dev/null
sleep 1

echo

umask 277

for DATABASE in $( $CMD_MYSQL -NBs -u"$MYSQL_USER" -p"$MYSQL_USER_PASS" -h"$MYSQL_HOST" -e "SHOW DATABASES" ); do
  echo -en "Dump db: \e[1;33m${DATABASE}\e[0m ... "
  $CMD_MYSQLDUMP --add-drop-table --default-character-set=utf8 --lock-all-tables \
      -u"$MYSQL_USER" -p"$MYSQL_USER_PASS" -h"$MYSQL_HOST" "$DATABASE" \
      > "${REPOSITORY}/mysql_${DATABASE}.sql"
  RET=$?
  echo -en "\e[60G" ## Go forward 60 columns
  if [ "$RET" == "0" ]; then
    echo -e "[ \e[1;32mOK\e[0m ]"
  else
    echo -e "[\e[1;31mFAILED\e[0m]"
  fi
done

